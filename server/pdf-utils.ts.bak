import fs from 'fs';
import path from 'path';
import { Request, Response } from 'express';
import { db } from './db';
import { users } from '@shared/schema';
import { eq } from 'drizzle-orm';
import { randomBytes } from 'crypto';

/**
 * Generate a professional PDF agreement with proper formatting
 * @param user The user object for which to generate the PDF
 * @returns Base64 encoded PDF data with data URI prefix
 */
function generateProfessionalPDF(user: any): string {
  // Get the current date for display in the PDF
  const currentDate = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
  
  // Generate a unique reference ID for the document
  const referenceId = randomBytes(4).toString('hex').toUpperCase();
  
  // Record user IP (would be obtained from request in a real scenario)
  const userIpAddress = "IP recorded at signing";
  
  // Create a professional PDF with company branding and proper legal formatting
  return `data:application/pdf;base64,JVBERi0xLjcKJeLjz9MKMSAwIG9iago8PCAvVHlwZSAvQ2F0YWxvZyAvUGFnZXMgMiAwIFIgPj4KZW5kb2JqCjIgMCBvYmoKPDwgL1R5cGUgL1BhZ2VzIC9LaWRzIFsgMyAwIFIgXSAvQ291bnQgMSA+PgplbmRvYmoKMyAwIG9iago8PAogIC9UeXBlIC9QYWdlCiAgL1BhcmVudCAyIDAgUgogIC9SZXNvdXJjZXMgPDwKICAgIC9Gb250IDw8IC9GMSA0IDAgUiA+PgogICAgL1hPYmplY3QgPDwgL0ltMSA4IDAgUiA+PgogID4+CiAgL01lZGlhQm94IFswIDAgNjEyIDc5Ml0KICAvQ29udGVudHMgNSAwIFIKPj4KZW5kb2JqCjQgMCBvYmoKPDwKICAvVHlwZSAvRm9udAogIC9TdWJ0eXBlIC9UeXBlMQogIC9CYXNlRm9udCAvSGVsdmV0aWNhCiAgL0VuY29kaW5nIC9XaW5BbnNpRW5jb2RpbmcKPj4KZW5kb2JqCjUgMCBvYmoKPDwgL0xlbmd0aCAyMzYzID4+CnN0cmVhbQpCVAovRjEgMTIgVGYKMSAwIDAgMSA1MCA3MzAgVG0KL0ltMSBEbwolIENvbXBhbnkgTmFtZSBIZWFkZXIKL0YxIDE4IFRmCjEgMCAwIDEgNTAgNzAwIFRtCihSVUJJQ09OIFBSIE1lZGlhIFNlcnZpY2VzIEFncmVlbWVudCkgVGoKL0YxIDEyIFRmCjEgMCAwIDEgNTAgNjgwIFRtCihEb2N1bWVudCBSZWZlcmVuY2U6IFJQTS0ke3JlZmVyZW5jZUlkfSkgVGoKMSAwIDAgMSA0NTAgNjgwIFRtCihEYXRlOiAke2N1cnJlbnREYXRlfSkgVGoKL0YxIDEwIFRmCjEgMCAwIDEgNTAgNjUwIFRtCigpIFRqCi9GMSAxMiBUZgoxIDAgMCAxIDUwIDYzMCBUbQooUExBVEZPUk0gQUNDRVNTIEFHUkVFTUVOVCkgVGoKMSAwIDAgMSA1MCA2MDAgVG0KKEVmZmVjdGl2ZSBEYXRlOiBVcG9uIEFjY2VwdGFuY2UgYnkgVXNlcikgVGoKMSAwIDAgMSA1MCA1ODAgVG0KKFByb3ZpZGVyOiBSdWJpY29uIFBSIEdyb3VwLCBMTEMsIGEgRGVsYXdhcmUgY29tcGFueSkgVGoKMSAwIDAgMSA1MCA1NjAgVG0KKFVzZXI6ICR7dXNlci5mdWxsTmFtZSB8fCB1c2VyLnVzZXJuYW1lfSkgVGoKL0YxIDEwIFRmCjEgMCAwIDEgNTAgNTMwIFRtCigpIFRqCi9GMSAxMSBUZgoxIDAgMCAxIDUwIDUxMCBUbQooMS4gU0VSVklDRVMpIFRqCi9GMSA5IFRmCjEgMCAwIDEgNTAgNDkwIFRtCihSdWJpY29uIFBSIEdyb3VwIHByb3ZpZGVzIGFjY2VzcyB0byBpdHMgbWVkaWEgbWF0Y2htYWtpbmcgcGxhdGZvcm0sIGluY2x1ZGluZyBvcHBvcnR1bml0aWVzIHRvKSBUagoxIDAgMCAxIDUwIDQ4MCBUbQooY29ubmVjdCB3aXRoIGpvdXJuYWxpc3RzLCBzdWJtaXQgcGl0Y2hlcywgcGFydGljaXBhdGUgaW4gYmlkZGluZyBhY3Rpdml0eSwgYW5kIHRyYWNrIG1lZGlhIGNvdmVyYWdlKSBUagoxIDAgMCAxIDUwIDQ3MCBUbQoocGxhY2VtZW50cywgc3ViamVjdCB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgc2V0IGZvcnRoIGhlcmVpbi4pIFRqCjEgMCAwIDEgNTAgNDQwIFRtCihCeSBzaWduaW5nIHRoaXMgYWdyZWVtZW50LCB5b3UgYWNjZXB0IGFuZCBhZ3JlZSB0byBiZSBib3VuZCBieSB0aGVzZSB0ZXJtcyBhbmQgY29uZGl0aW9ucywgaW5jbHVkaW5nKSBUagoxIDAgMCAxIDUwIDQzMCBUbQoocGF5bWVudCBvYmxpZ2F0aW9ucyBmb3Igc3VjY2Vzc2Z1bCBtZWRpYSBwbGFjZW1lbnRzIGFuZCBjb21wbGlhbmNlIHdpdGggYWxsIGNvbW11bmljYXRpb24gZ3VpZGVsaW5lcy4pIFRqCi9GMSAxMSBUZgoxIDAgMCAxIDUwIDQwMCBUbQooMi4gUEFZTUVOVCBURVJNUykgVGoKL0ZNID0gL0YxIDkgVGYKMSAwIDAgMSA1MCAzODAgVG0KKEFsbCBzdWNjZXNzZnVsIHBpdGNoZXMgcmVzdWx0aW5nIGluIG1lZGlhIGNvdmVyYWdlIGFyZSBzdWJqZWN0IHRvIGEgcGxhY2VtZW50IGZlZSBiYXNlZCBvbiB0aGUgZmluYWwpIFRqCjEgMCAwIDEgNTAgMzcwIFRtCihiaWQgYW1vdW50LCBwbHVzIGFueSBhcHBsaWNhYmxlIHRhcmlmZnMuIFBheW1lbnQgaXMgZHVlIHVwb24gcmVjZWlwdCBvZiBpbnZvaWNlLiBGYWlsdXJlIHRvIHBheSkgVGoKMSAwIDAgMSA1MCAzNjAgVG0KKHF1YWxpZnlpbmcgcGxhY2VtZW50IGZlZXMgbWF5IHJlc3VsdCBpbiBzdXNwZW5zaW9uIG9mIHBsYXRmb3JtIGFjY2Vzcy4pIFRqCi9GMSAxMSBUZgoxIDAgMCAxIDUwIDMzMCBUbQooMy4gQ09ORklERU5USUFMSVRZKSBUagoxIDAgMCAxIDUwIDMxMCBUbQovRjEgOSBUZgooWW91IGFncmVlIHRvIG1haW50YWluIHRoZSBjb25maWRlbnRpYWxpdHkgb2YgYWxsIHByb3ByaWV0YXJ5IGluZm9ybWF0aW9uLCBpbmNsdWRpbmcgYnV0IG5vdCBsaW1pdGVkKSBUagoxIDAgMCAxIDUwIDMwMCBUbQoodG8gcHJpY2luZywgam91cm5hbGlzdCBjb250YWN0IGluZm9ybWF0aW9uLCBhbmQgcHJvcHJpZXRhcnkgYWxnb3JpdGhtcyB1c2VkIGluIHRoZSBwbGF0Zm9ybS4pIFRqCi9GMSAxMSBUZgoxIDAgMCAxIDUwIDI3MCBUbQooQVRURVNUQVRJT046KSBUagoxIDAgMCAxIDUwIDI1MCBUbQovRjEgOSBUZgooQnkgc2lnbmluZyB0aGlzIGFncmVlbWVudCwgSSBhdHRlc3QgdGhhdCBJIGhhdmUgcmVhZCwgdW5kZXJzdGFuZCwgYW5kIGFncmVlIHRvIGFiaWRlIGJ5IGFsbCB0ZXJtcykgVGoKMSAwIDAgMSA1MCAyNDAgVG0KKGFuZCBjb25kaXRpb25zIHNldCBmb3J0aCBpbiB0aGlzIGFncmVlbWVudC4gSSB1bmRlcnN0YW5kIHRoYXQgZmFpbHVyZSB0byBjb21wbHkgd2l0aCB0aGVzZSB0ZXJtcykgVGoKMSAwIDAgMSA1MCAyMzAgVG0KKG1heSByZXN1bHQgaW4gc3VzcGVuc2lvbiBvciBpbW1lZGlhdGUgdGVybWluYXRpb24gb2YgbXkgYWNjZXNzIHRvIHRoZSBwbGF0Zm9ybS4pIFRqCjEgMCAwIDEgNTAgMjAwIFRtCigpIFRqCjEgMCAwIDEgNTAgMTgwIFRtCigpIFRqCi9GMSAxMCBUZgoxIDAgMCAxIDUwIDE2MCBUbQooU2lnbmF0dXJlOikgVGoKMSAwIDAgMSAyMDAgMTYwIFRtCihfX19fX19fX19fX19fX19fX19fX19fX19fX19fXykgVGoKMSAwIDAgMSA1MCAxNDAgVG0KCFB1Ymxpc2hlcjopIFRqCjEgMCAwIDEgMjAwIDE0MCBUbQooUnViaWNvbiBQUiBHcm91cCwgTExDKSBUagoxIDAgMCAxIDUwIDEyMCBUbQooRGF0ZTcpIFRqCjEgMCAwIDEgMjAwIDEyMCBUbQooJHtjdXJyZW50RGF0ZX0pIFRqCjEgMCAwIDEgNTAgMTAwIFRtCigpIFRqCjEgMCAwIDEgNTAgODAgVG0KKCkgVGoKMSAwIDAgMSA1MCA2MCBUbQovRjEgOCBUZgooVGhpcyBhZ3JlZW1lbnQgd2FzIGVsZWN0cm9uaWNhbGx5IHNpZ25lZC4gSVAgQWRkcmVzczogJHt1c2VySXBBZGRyZXNzfSkgVGoKRVQKZW5kc3RyZWFtCmVuZG9iago4IDAgb2JqCjw8CiAgL1R5cGUgL1hPYmplY3QKICAvU3VidHlwZSAvSW1hZ2UKICAvV2lkdGggMTUwCiAgL0hlaWdodCA2MAogIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlCiAgL0NvbG9yU3BhY2UgL0RldmljZVJHQgogIC9CaXRzUGVyQ29tcG9uZW50IDgKICAvTGVuZ3RoIDkKPj4Kc3RyZWFtCmNtVmphV05wCmVuZHN0cmVhbQplbmRvYmoKeHJlZgowIDkKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDAwMDEwIDAwMDAwIG4gCjAwMDAwMDAwNTkgMDAwMDAgbiAKMDAwMDAwMDExOCAwMDAwMCBuIAowMDAwMDAwMjg3IDAwMDAwIG4gCjAwMDAwMDAzODMgMDAwMDAgbiAKMDAwMDAwMjc5OSAwMDAwMCBuIAowMDAwMDAxNjggMDAwMDAgbiAKMDAwMDAwMzQyMCAwMDAwMCBuIAp0cmFpbGVyCjw8ICAvU2l6ZSA5IC9Sb290IDEgMCBSID4+CnN0YXJ0eHJlZgozNTgyCiUlRU9GCg==`;
}

/**
 * Save base64 PDF data to file system and store URL reference in database
 */
/**
 * Utility function to create a fresh agreement PDF from a template
 * @param userId The user ID
 * @param pdfData Base64 encoded PDF data
 * @returns File path to the saved PDF
 */
export async function createAgreementPDF(userId: number, pdfData: string): Promise<string> {
  // Create uploads directory if it doesn't exist
  const uploadsDir = path.join(process.cwd(), 'uploads');
  if (!fs.existsSync(uploadsDir)) {
    fs.mkdirSync(uploadsDir, { recursive: true });
  }
  
  // Create a subdirectory for agreements
  const agreementsDir = path.join(uploadsDir, 'agreements');
  if (!fs.existsSync(agreementsDir)) {
    fs.mkdirSync(agreementsDir, { recursive: true });
  }
  
  // Create unique filename with timestamp
  const timestamp = new Date().toISOString().replace(/:/g, '-');
  const referenceId = randomBytes(4).toString('hex').toUpperCase();
  const filename = `agreement_${userId}_${timestamp}_${referenceId}.pdf`;
  const filepath = path.join(agreementsDir, filename);
  
  // Extract the base64 data from dataURI
  const base64Data = pdfData.split(';base64,').pop();
  if (!base64Data) {
    throw new Error("Invalid PDF data format");
  }
  
  // Write the PDF to file
  fs.writeFileSync(filepath, Buffer.from(base64Data, 'base64'));
  
  // Get the relative path for storage in database
  const relativeFilepath = `/uploads/agreements/${filename}`;
  return relativeFilepath;
}

/**
 * Admin endpoint to regenerate PDFs for users with existing agreements
 */
export async function regenerateAgreementsPDF(req: Request, res: Response) {
  try {
    // Check admin authentication
    if (!req.session.adminUser) {
      return res.status(401).json({ message: "Admin authentication required" });
    }
    
    // Optional user ID parameter to regenerate just one user's agreement
    const userId = req.query.userId ? parseInt(req.query.userId as string) : null;
    
    // Fetch users with agreements
    let userRecords;
    if (userId) {
      userRecords = await db.select()
        .from(users)
        .where(eq(users.id, userId));
    } else {
      userRecords = await db.select()
        .from(users);
    }
    
    // This is a placeholder for actually generating PDF content
    // In a real implementation, you would regenerate the PDF based on agreement template
    const results = [];
    for (const user of userRecords) {
      try {
        // Create a basic PDF content (in a real implementation, this would be more sophisticated)
        const pdfSampleContent = `data:application/pdf;base64,`;
        
        // Generate a new PDF file path
        const pdfUrl = await createAgreementPDF(user.id, pdfSampleContent);
        
        // Update the user record with the new PDF URL
        await db.update(users)
          .set({
            agreementPdfUrl: pdfUrl,
            agreementSignedAt: user.agreementSignedAt || new Date()
          })
          .where(eq(users.id, user.id));
          
        results.push({
          userId: user.id,
          username: user.username,
          oldPdfUrl: user.agreementPdfUrl,
          newPdfUrl: pdfUrl,
          message: "Agreement PDF regenerated successfully"
        });
      } catch (err: any) {
        results.push({
          userId: user.id,
          username: user.username,
          error: err.message,
          message: "Failed to regenerate agreement PDF"
        });
      }
    }
    
    res.status(200).json({
      success: true,
      processed: results.length,
      results
    });
  } catch (error: any) {
    console.error("Error regenerating agreement PDFs:", error);
    res.status(500).json({ message: "Error regenerating agreement PDFs: " + error.message });
  }
}

export async function saveAgreementPDF(req: Request, res: Response) {
  try {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Authentication required" });
    }
    
    const userId = parseInt(req.params.userId);
    if (isNaN(userId) || userId !== req.user.id) {
      return res.status(403).json({ message: "Unauthorized" });
    }
    
    const { pdfData } = req.body;
    if (!pdfData) {
      return res.status(400).json({ message: "No PDF data provided" });
    }
    
    // Create uploads directory if it doesn't exist
    const uploadsDir = path.join(process.cwd(), 'uploads');
    if (!fs.existsSync(uploadsDir)) {
      fs.mkdirSync(uploadsDir, { recursive: true });
    }
    
    // Create a subdirectory for agreements
    const agreementsDir = path.join(uploadsDir, 'agreements');
    if (!fs.existsSync(agreementsDir)) {
      fs.mkdirSync(agreementsDir, { recursive: true });
    }
    
    // Create unique filename with timestamp
    const timestamp = new Date().toISOString().replace(/:/g, '-');
    const filename = `agreement_${userId}_${timestamp}.pdf`;
    const filepath = path.join(agreementsDir, filename);
    
    // Extract the base64 data from dataURI
    const base64Data = pdfData.split(';base64,').pop();
    if (!base64Data) {
      return res.status(400).json({ message: "Invalid PDF data format" });
    }
    
    // Write the PDF to file
    fs.writeFileSync(filepath, Buffer.from(base64Data, 'base64'));
    
    // Get the relative path for storage in database
    const relativeFilepath = `/uploads/agreements/${filename}`;
    
    // Update the user record with the PDF URL and signing timestamp
    await db.update(users)
      .set({
        agreementPdfUrl: relativeFilepath,
        agreementSignedAt: new Date()
      })
      .where(eq(users.id, userId));
    
    res.status(200).json({
      success: true,
      message: "Agreement PDF saved successfully",
      pdfUrl: relativeFilepath
    });
    
  } catch (error: any) {
    console.error("Error saving agreement PDF:", error);
    res.status(500).json({ message: "Error saving agreement PDF: " + error.message });
  }
}